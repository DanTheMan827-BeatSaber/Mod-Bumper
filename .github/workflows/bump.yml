name: Bump mods

on:
  workflow_dispatch:
    inputs:
      force_build:
        type: boolean
        default: false

permissions:
  actions: write

jobs:
  get-mods:
    runs-on: ubuntu-latest
    outputs:
      packageVersion: ${{ steps.parse-mods.outputs.packageVersion }}
      newestDependencies: ${{ steps.parse-mods.outputs.newestDependencies }}
      bs-cordl: ${{ steps.parse-mods.outputs.bs-cordl }}
      installedMods: ${{ steps.parse-mods.outputs.installedMods }}
      mods: ${{ steps.parse-mods.outputs.mods }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup qpm
        uses: fernthedev/qpm-action@v1
        with:
          workflow_token: ${{ secrets.GITHUB_TOKEN}}
          restore: false
          resolve_ndk: false
          cache: false

      - name: Get version from bs-cordl
        id: cordl-check
        run: |


      - name: Parse mods.json
        id: parse-mods
        run: |
          echo "installedMods=$(jq -crM '.installedMods | to_entries | map({id: .key} + .value)' mods.json)" >> $GITHUB_OUTPUT
          echo "mods=$(jq -crM '.mods | to_entries | map({id: .key} + .value)' mods.json)" >> $GITHUB_OUTPUT
          echo "newestDependencies=$(jq -crM '.newestDependencies | to_entries | map("\(.key):\(.value)")' mods.json)" >> $GITHUB_OUTPUT
          cordl="$(jq -rM '.newestDependencies["bs-cordl"]' mods.json)"
          echo "bs-cordl=$cordl" >> $GITHUB_OUTPUT

          mkdir -p /tmp/package-check
          (
            cd /tmp/package-check
            qpm package create "package-test" "0.1.0"
            qpm dependency add bs-cordl -v "$cordl"
            qpm restore --update
            echo "packageVersion=$(cat extern/includes/bs-cordl/include/version.txt)" >> $GITHUB_OUTPUT
          )
          rm -r /tmp/package-check
          
          cat $GITHUB_OUTPUT

  bump-installable-mods:
    needs: [get-mods]
    uses: ./.github/workflows/bump-reusable.yml
    secrets: inherit
    name: bump ${{ matrix.id }}
    with:
      id: ${{ matrix.id }}
      game_version: ${{ needs.get-mods.outputs.packageVersion }}
      bs_cordl: ${{ needs.get-mods.outputs.bs-cordl }}
      newest_mods: ${{ needs.get-mods.outputs.newestDependencies }}
      repo: ${{ matrix.repo }}
      version: ${{ matrix.version }}
      branch: ${{ matrix.branch }}
      install: true
      build_command: ${{ matrix.build }}
      qmod_command: ${{ matrix.qmod }}
      prebump_command: ${{ matrix.prebump }}
      force_build: ${{ inputs.force_build }}

    strategy:
      max-parallel: 1
      matrix:
        include: ${{ fromJson(needs.get-mods.outputs.installedMods)}}

  bump:
    needs: [bump-installable-mods, get-mods]
    uses: ./.github/workflows/bump-reusable.yml
    secrets: inherit
    name: bump ${{ matrix.id }}
    with:
      id: ${{ matrix.id }}
      game_version: ${{ needs.get-mods.outputs.packageVersion }}
      bs_cordl: ${{ needs.get-mods.outputs.bs-cordl }}
      newest_mods: ${{ needs.get-mods.outputs.newestDependencies }}
      repo: ${{ matrix.repo }}
      version: ${{ matrix.version }}
      branch: ${{ matrix.branch }}
      install: false
      build_command: ${{ matrix.build }}
      qmod_command: ${{ matrix.qmod }}
      prebump_command: ${{ matrix.prebump }}
      force_build: ${{ inputs.force_build }}

    strategy:
      matrix:
        include: ${{ fromJson(needs.get-mods.outputs.mods) }}

  combine-artifacts:
    needs: bump
    runs-on: ubuntu-latest

    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          pattern: qmod_*

      - name: Move QMODs to root
        run: |
          find artifacts -type f -name '*.qmod' -exec mv {} . \;

      - name: Upload combined artifact
        uses: actions/upload-artifact@v4
        with:
          name: all_qmods
          path: |
            *.qmod

  upload-cache:
    needs: [get-mods, bump]
    runs-on: ubuntu-latest

    steps:
      - name: Get home path
        run: |
          echo "HOME=$HOME" | tee -a "$GITHUB_ENV"

      - name: Restore QPM Cache
        uses: actions/cache/restore@v4
        with:
          key: qpm-cache-${{ runner.os }}-${{ github.run_id }}-
          restore-keys: qpm-cache-${{ runner.os }}-${{ github.run_id }}-
          path: |
            ${{ env.HOME }}/.local/share/QPM-RS
            ${{ env.HOME }}/.config/QPM-RS

      - name: Clear NDK cache
        run: |
          rm -r "${{ env.HOME }}/.local/share/QPM-RS/ndk" || echo "No NDK cache to clear"

      - name: Upload cache artifact
        uses: actions/upload-artifact@v4
        with:
          name: qpm-cache
          include-hidden-files: true
          path: |
            ${{ env.HOME }}/.local/share/QPM-RS
            ${{ env.HOME }}/.config/QPM-RS

  clear-cache-end:
    runs-on: ubuntu-latest
    if: always()
    needs: [get-mods, bump, upload-cache]
    steps:
      - name: Delete all QPM caches
        env:
          GH_TOKEN: ${{ github.token }}
          REPO: ${{ github.repository }}
        run: |
          gh api -H "Accept: application/vnd.github+json" \
            /repos/$REPO/actions/caches \
            --paginate \
            -q '.actions_caches[] | select(.key | startswith("qpm-cache-${{ runner.os }}-${{ github.run_id }}-")) | .id' |
          while read cache_id; do
            echo "Deleting cache id $cache_id"
            gh api --method DELETE /repos/$REPO/actions/caches/$cache_id
          done
